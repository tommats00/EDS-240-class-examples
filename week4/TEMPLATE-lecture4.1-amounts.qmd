---
title: "Lecture 4.1 TEMPLATE"
subtitle: "Visualizing amounts / rankings"
author: "Your Name"
date: 2025-01-27
toc: true
---

::: {.callout-note}
This template follows [lecture 4.1 slides](https://eds-240-data-viz.github.io/course-materials/lecture-slides/lecture4.1-amounts-slides.html#/title-slide){target="_blank"}.
:::

## Setup

Data are downloaded directly from the [tidytuesday GitHub repository](https://github.com/rfordatascience/tidytuesday/tree/main/data/2019/2019-03-05).

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(scales)

#..........................import data...........................
jobs <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-05/jobs_gender.csv")

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                wrangle data                              ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

jobs_clean <- jobs |> 
  
  # add col with % men in a given occupation (% females in a given occupation is already included) ----
  mutate(percent_male = 100 - percent_female) |>
         
  # rearrange columns ----
  relocate(year, major_category, minor_category, occupation,
          total_workers, workers_male, workers_female,
          percent_male, percent_female,
          total_earnings, total_earnings_male, total_earnings_female, 
          wage_percent_of_male) |> 
  
  # drop rows with missing earnings data ----
  drop_na(total_earnings_male, total_earnings_female) |> 
  
  # make occupation a factor (for reordering groups in our plot) ----
  mutate(occupation = as.factor(occupation)) |> 
 
  # classify jobs by percentage male or female (these will become facet labels in our dumbbell plot) ----
  mutate(group_label = case_when(
    percent_female >= 75 ~ "Occupations that are 75%+ female",
    percent_female >= 45 & percent_female <= 55 ~ "Occupations that are 45-55% female",
    percent_male >= 75 ~ "Occupations that are 75%+ male"
  )) 

# --------- If values don't fall within the ranges provided, then an NA will be given in the cell ---------------
```

## Bar chart vs. Lolliplot chart

- explore the top ten occupations with the highest median earnings in 2016 (full-time workers > 16 years old)
- for both examples, we'll: 
    - flip axes to make space for labels
    - reorder groups
    - add scales labels
    - add direct labels

### Bar chart

```{r}
#| eval: true
#| echo: true
# bar chart ----

jobs_clean %>% 
  filter(year == 2016) %>% 
  slice_max(order_by = total_earnings, n = 10) %>% 
  mutate(occupation = fct_reorder(occupation, total_earnings)) %>%  # ---- Reordering occupation by total_earnings 
  ggplot(aes(x = occupation, y = total_earnings)) +
  geom_col() +
  geom_text(aes(label = dollar(total_earnings)),
            hjust = 1.2, color = "white") +
  scale_y_continuous(labels = label_currency(scale = 0.001, suffix = "k"))  + #modifies Y axis into dollar amounts in thousands 
  coord_flip() # Flips x and y coordinates 
```

### Lollipop chart
```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
# lollipop chart ----
jobs_clean |> 
  filter(year == 2016) |> 
  slice_max(order_by = total_earnings, n = 10) |> 
  mutate(occupation = fct_reorder(occupation, total_earnings)) |> 
  ggplot(aes(x = occupation, y = total_earnings)) +
  geom_point() +
  geom_text(aes(label = dollar(total_earnings)),
            hjust = -0.2, color = "black") +
  geom_linerange(aes(ymin = 0, ymax = total_earnings)) +
  scale_y_continuous(labels = label_currency(scale = 0.001, suffix = "k"), 
                     limits = c(0, 225000)) +
  coord_flip()
```

## An aside: when to use `geom_col()` vs. `geom_bar()`

- use `geom_col()` when you have data that's already summarized

```{r}
#| eval: true
#| echo: true
# geom_col() ----
jobs_clean |> 
  filter(year == 2016) |> 
  slice_max(order_by = total_earnings, n = 10) |> 
  ggplot(aes(x = occupation, y = total_earnings)) +
  geom_col() +
  coord_flip()
```

- use `geom_bar()` when you need ggplot to count up the number of rows for you

```{r}
#| eval: true
#| echo: true
# geom_bar() ----
ggplot(jobs_clean, aes(x = major_category)) +
  geom_bar() + 
  coord_flip()
```

## Bar & lollipop charts for visualizing 2+ groups

- explore male and female salaries for the top ten occupations with the highest median earnings in 2016 (full-time workers > 16 years old)
- for both examples, we'll: 
    - transform data from long to wide format
    - color by sex
    - dodge by sex

### Bar chart (2 groups)

```{r}
#| eval: true
#| echo: true
# bar chart ----
jobs_clean |> 
  filter(year == 2016) |> 
  slice_max(order_by = total_earnings, n = 10) |> 
  mutate(occupation = fct_reorder(.f = occupation, .x = total_earnings)) %>% 
  pivot_longer(cols = c(total_earnings_female, total_earnings_male), # columns selected for pivot longer
               names_to = "group",  # new column name containing previous column names
               values_to = "earnings_by_group") %>% # new column containing previous columns values 
  mutate(sex = str_remove(string = group, pattern = "total_earnings_")) %>% # removing pattern string from column "group"
  ggplot(aes(x = occupation, y = earnings_by_group, fill = sex)) +
  geom_col(position = position_dodge()) +
  coord_flip()
```

### Lollipop chart (2 groups)

```{r}
#| eval: true
#| echo: true
# lollipop chart ----
jobs_clean |>
  filter(year == 2016) |>
  slice_max(order_by = total_earnings, n = 10) |>
  mutate(occupation = fct_reorder(.f = occupation, .x = total_earnings)) |> 
  pivot_longer(cols = c(total_earnings_female, total_earnings_male), names_to = "group", values_to = "earnings_by_group") |> 
  mutate(sex = str_remove(string = group, pattern = "total_earnings_")) %>% 
  ggplot(aes(x = occupation, y = earnings_by_group, color = sex)) +
  geom_point(position = position_dodge(width = 0.5)) +
  geom_linerange(aes(ymin = 0, ymax = earnings_by_group), 
                 position = position_dodge(width = 0.5)) +
  coord_flip()
```

## Heatmap

- explore the change in total earnings through time for any “analyst” positions
- for this example, we'll: 
  - filter for only "analyst" occupations
  - order occupations by the highest salary in 2016
  
### First, some data wrangling

```{r}
#| eval: true
#| echo: true
# filter for occupations that have the word "analyst" in title ----
analysts <- jobs_clean |> 
  filter(str_detect(string = occupation, pattern = "analyst")) |> # str_detect, looking in occupation column for "analyst"
  select(year, occupation, total_earnings)

# determine order of occupations based on highest total_earnings in 2016 ----
order_2016 <- analysts |>
  filter(year == 2016) |>
  arrange(total_earnings) |>
  mutate(order = row_number()) |>
  select(occupation, order)

# join order with rest of data to set factor levels ----
heatmap_order <- analysts |>
  left_join(order_2016, by = "occupation") |>
  mutate(occupation = fct_reorder(occupation, order))
```

```{r}
#| eval: true
#| echo: true
# create heatmap ----
ggplot(heatmap_order, aes(x = year, y = occupation, fill = total_earnings)) +
  geom_tile() +
  labs(fill = "Total Earnings ($)") +
  coord_fixed() + # fixes aspect ratio so they appear as squares
  scale_fill_viridis_c(labels = label_currency(scale = 0.001, suffix = "k")) +
  scale_y_discrete(labels = label_wrap(30)) + # Wrapping occupation labels into 2 lines
  guides(fill = guide_colorbar(barwidth = 15, barheight = 0.75,
                               title.position = "top")) +
  theme(
    legend.position = "top",
    axis.title = element_blank()
  )
```

## Dumbbell plot

### (More) data wrangling

- explore the difference in median salaries between male and female workers, by occupation
- there are too many occupations to reasonably plot at once, so let's take just 10 random occupations from each group (female-dominated, male-dominated, and evenly(ish) split); we'll also only use 2016 data

```{r}
#| eval: true
#| echo: true
#....guarantee the same random samples each time we run code.....
set.seed(0)

#.........get 10 random jobs that are 75%+ female (2016).........
f75 <- jobs_clean |> 
  filter(year == 2016, group_label == "Occupations that are 75%+ female") |> 
  slice_sample(n = 10)

#..........get 10 random jobs that are 75%+ male (2016)..........
m75 <- jobs_clean |> 
  filter(year == 2016, group_label == "Occupations that are 75%+ male") |> 
  slice_sample(n = 10)

#........get 10 random jobs that are 45-55%+ female (2016).......
f50 <- jobs_clean |> 
  filter(year == 2016, group_label == "Occupations that are 45-55% female") |> 
  slice_sample(n = 10)

#.......combine dfs & relevel factors (for plotting order).......
subset_jobs <- rbind(f75, m75, f50) |> 
  mutate(group_label = fct_relevel(group_label, 
                                   "Occupations that are 75%+ female", 
                                   "Occupations that are 45-55% female", 
                                   "Occupations that are 75%+ male"),
         occupation = fct_reorder(.f = occupation, .x = total_earnings)) 
```

### Build dumbbell plot

```{r}
#| eval: true
#| echo: true
#| out-width: "100%"
# dumbbell plot ----
ggplot(subset_jobs) +
    geom_linerange(aes(y = occupation, xmin = total_earnings_female, xmax = total_earnings_male)) +
  geom_point(aes(x = total_earnings_male, y = occupation),
             color = "plum", size = 2.5) +
  geom_point(aes(x = total_earnings_female, y = occupation),
             color = "purple", size = 2.5) +
  facet_wrap(~group_label, nrow = 3, scales = "free_y") +
  scale_x_continuous(labels = label_dollar(scale = 0.001, suffix = "k"), breaks = c(25000, 50000, 75000, 100000))
```
