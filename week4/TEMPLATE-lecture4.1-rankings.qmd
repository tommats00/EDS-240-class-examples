---
title: "Lecture 4.1 TEMPLATE"
subtitle: "Visualizing rankings"
author: "Your Name"
date: 2025-01-27
toc: true
---

::: {.callout-note}
This template follows [lecture 4.1 slides](https://eds-240-data-viz.github.io/course-materials/lecture-slides/lecture4.1-rankings-slides.html#/title-slide){target="_blank"}.
:::

## Setup

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)

#..........................import data...........................
# find import code at: https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-03-05#grab-the-clean-data-here
jobs <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-05/jobs_gender.csv")

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                wrangle data                              ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

jobs_clean <- jobs |> 
  
  # add col with % men in a given occupation (% females in a given occupation was already included) ----
  mutate(percent_male = 100 - percent_female) |>
         
  # rearrange columns ----
  relocate(year, major_category, minor_category, occupation,
          total_workers, workers_male, workers_female,
          percent_male, percent_female,
          total_earnings, total_earnings_male, total_earnings_female, 
          wage_percent_of_male) |> 
  
  # drop rows with missing earnings data ----
  drop_na(total_earnings_male, total_earnings_female) |> 
  
  # make occupation a factor (necessary for reordering groups in our plot) ----
  mutate(occupation = as.factor(occupation)) |> 
 
  # classify jobs by percentage male or female (these will become facet labels in our plot) ----
  mutate(group_label = case_when(
    percent_female >= 75 ~ "Occupations that are 75%+ female",
    percent_female >= 45 & percent_female <= 55 ~ "Occupations that are 45-55% female",
    percent_male >= 75 ~ "Occupations that are 75%+ male"
  )) 
```

## Bar chart vs. Lolliplot chart

- for both examples, we'll: 
    - flip axes to make space for labels
    - reorder groups
    - add scales labels
    - add direct labels

### Bar chart

```{r}
#| eval: true
#| echo: true
# bar chart ----
```

### Lollipop chart
```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
# lollipop chart ----
```

## An aside: when to use `geom_col()` vs. `geom_bar()`

- use `geom_col()` when you have data that's already summarized

```{r}
#| eval: true
#| echo: true
# geom_col() ----
jobs_clean |> 
  filter(year == 2016) |> 
  slice_max(order_by = total_earnings, n = 10) |> 
  ggplot(aes(x = occupation, y = total_earnings)) +
  geom_col() +
  coord_flip()
```

- use `geom_bar()` when you need ggplot to count up the number of rows for you

```{r}
#| eval: true
#| echo: true
# geom_bar() ----
ggplot(jobs_clean, aes(x = major_category)) +
  geom_bar() + 
  coord_flip()
```

## Visualizing 2+ groups

- for both examples, we'll: 
    - transform data from long to wide format
    - color by sex
    - dodge by sex

### Bar chart (2 groups)

```{r}
#| eval: true
#| echo: true
# bar chart ----
```

### Lollipop chart (2 groups)

```{r}
#| eval: true
#| echo: true
# lollipop chart ----
```

## Dumbbell plot

### (More) data wrangling

- there are too many occupations to reasonably plot at once, so let's take just 10 random occupations from each group (female-dominated, male-dominated, and evenly(ish) split); we'll also only use 2016 data

```{r}
#| eval: true
#| echo: true
#....guarantee the same random samples each time we run code.....
set.seed(0)

#.........get 10 random jobs that are 75%+ female (2016).........
f75 <- jobs_clean |> 
  filter(year == 2016, group_label == "Occupations that are 75%+ female") |> 
  slice_sample(n = 10)

#..........get 10 random jobs that are 75%+ male (2016)..........
m75 <- jobs_clean |> 
  filter(year == 2016, group_label == "Occupations that are 75%+ male") |> 
  slice_sample(n = 10)

#........get 10 random jobs that are 45-55%+ female (2016).......
f50 <- jobs_clean |> 
  filter(year == 2016, group_label == "Occupations that are 45-55% female") |> 
  slice_sample(n = 10)

#.......combine dfs & relevel factors (for plotting order).......
subset_jobs <- rbind(f75, m75, f50) |> 
  mutate(group_label = fct_relevel(group_label, 
                                   "Occupations that are 75%+ female", 
                                   "Occupations that are 45-55% female", 
                                   "Occupations that are 75%+ male")) 
```

### Build dumbbell plot

```{r}
#| eval: true
#| echo: true
#| out-width: "100%"
# dumbbell plot ----
```
