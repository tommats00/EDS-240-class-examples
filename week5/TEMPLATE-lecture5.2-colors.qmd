---
title: "Lecture 5.2 TEMPLATE"
subtitle: "Colors"
author: "Your Name"
date: 2025-02-03
toc: true
---

::: {.callout-note}
This template follows [lecture 5.2 slides](https://eds-240-data-viz.github.io/course-materials/lecture-slides/lecture5.2-colors-slides.html#/title-slide){target="_blank"}. Please be sure to cross-reference the slides, which contain important information and additional context!
:::

## Setup

```{r}
#| eval: true
#| echo: true
#| warning: false
#| message: false
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(palmerpenguins)
library(tidyverse)

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                              create base plots                           ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# requires categorical color scale ----
cat_color_plot <- ggplot(na.omit(penguins), 
                         aes(x = bill_length_mm, y = bill_depth_mm, 
                             color = species, shape = species)) +
  geom_point(size = 4, alpha = 0.8)

# requires continuous color scale ----
cont_color_plot <- ggplot(na.omit(penguins), 
                          aes(x = bill_length_mm, y = bill_depth_mm, 
                              color = body_mass_g)) +
  geom_point(size = 4, alpha = 0.8) 
```

## Colors for inclusive & accessible design

### Viridis scales

- Check out the [documentation](https://ggplot2.tidyverse.org/reference/scale_viridis.html) for additional viridis palette options. 

```{r}
#| eval: true
#| echo: true
#| warning: false

# discrete viridis scales ----
cat_color_plot 

# continuous color scales ----
cont_color_plot
```

### RColorBrewer scales

- Exploring available palettes and generating HEX codes (or check out the [web-based interface](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3)):

```{r}
#| eval: true
#| echo: true
# display only colorblind-friendly RColorBrewer palettes ----
RColorBrewer::display.brewer.all()

# preview palette with your number of desired colors ----
RColorBrewer::display.brewer.pal()

# print the HEX codes of your palette ----
RColorBrewer::brewer.pal()

# or save hex codes as a vector ----
```

- Using RColorBrewer palettes

```{r}
#| eval: true
#| echo: true
#| warning: false

# for qualitative palettes ----
cat_color_plot 

# for unclassed continuous color scales ----
cont_color_plot

# for classed continuous color scales ----
cont_color_plot
```

### Accessibility tips

- outline light-colored points, which are difficult to see

```{r}
#| eval: true
#| echo: true
#| warning: false
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = body_mass_g)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_distiller(palette = "BuPu")
```

- use redundant mapping (colors & shapes) whenever possible (recall our original plot, with an added viridis color palette)

```{r}
#| eval: true
#| echo: true
#| warning: false
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) + 
  scale_color_viridis_d(option = "turbo") 
```

## Paletteer

### I. apply palette using `scale_*_paletteer_*()`

```{r}
#| eval: true
#| echo: true
#| warning: false
# discrete data / palette ----
cat_color_plot 

# continuous data / palette (unclassed) ----
cont_color_plot 

# continuous data / palette (classed) ----
cont_color_plot 
```

### II. create vector of colors using `paletteer_*()`, then apply using the appropriate `ggplot::scale_*()` function

- discrete data / palette example: 

```{r}
#| eval: true
#| echo: true
#| warning: false
#| message: false
# create palette ----

# apply to scatter plot (use `color` variant) ----
cat_color_plot 

# apply to histogram (use `fill` variant) ----
ggplot(penguins, aes(x = body_mass_g, fill = species)) +
  geom_histogram() 
```

- continuous data / palette example: 

```{r}
#| eval: true
#| echo: true
#| warning: false
#| message: false
# create palette ----

# apply to scatter plot as an unclassed palette (use `gradientn` variant) ---- 
cont_color_plot

# apply to scatter plot as a classed (binned) palette (use `stepsn` variant) ---- 
cont_color_plot 
```

## Subduing pure hues

1. Adjust **saturation** when selecting a HEX code from Google's color picker, <https://g.co/kgs/9SQkdgv>, or adjust **chroma** directly in your ggplot:

```{r}
#| eval: true
#| echo: true
#| warning: false
ggplot(na.omit(penguins), aes(x = species, fill = sex)) +
  geom_bar()
```

2. Adjust **value** when selecting a HEX code from Google's color picker, <https://g.co/kgs/9SQkdgv>, or adjust **lightness** directly in your ggplot:

```{r}
#| eval: true
#| echo: true
#| warning: false
ggplot(na.omit(penguins), aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +
  geom_point()
```

3. Increase transparency using the `alpha` argument in ggplot

```{r}
#| eval: true
#| echo: true
#| warning: false
ggplot(penguins, aes(x = species)) +
  geom_bar(fill = "#00FF33", color = "gray7") + 
  theme_classic() 
```

## Some final palette tips

### Save palette outside of plot

```{r}
#| eval: true
#| echo: true
#| warning: false
# plot with custom palette ----
cat_color_plot +
  scale_color_manual(values = c("#32DE8A", "#E36414", "#0F4C5C")) 
```

### Set color names

```{r}
#| eval: true
#| echo: true
#| warning: false
# create palette ----
my_palette_named <- c("#32DE8A", "#E36414", "#0F4C5C")

# apply to plot (all penguins) ----
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_manual(values = my_palette_named)

# apply to plot (just adelie & gentoo) ----
penguins |> 
  filter(species != "Chinstrap") |> 
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_manual(values = my_palette_named)
```

### Use `scale_*_identity()`

```{r}
#| eval: true
#| echo: true
#| warning: false
# example 1 (color points based on value) ----
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(size = 4, alpha = 0.8) 

# example 2 (highlight points based on criteria)
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(size = 4, alpha = 0.8)
```

